{"remainingRequest":"/Users/kingsun/打咩/Vue/vue-practice/node_modules/babel-loader/lib/index.js!/Users/kingsun/打咩/Vue/vue-practice/src/utils/queue.js","dependencies":[{"path":"/Users/kingsun/打咩/Vue/vue-practice/src/utils/queue.js","mtime":1658197392452},{"path":"/Users/kingsun/打咩/Vue/vue-practice/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kingsun/打咩/Vue/vue-practice/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9raW5nc3VuL1x1NjI1M1x1NTRBOS9WdWUvdnVlLXByYWN0aWNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICIvVXNlcnMva2luZ3N1bi9cdTYyNTNcdTU0QTkvVnVlL3Z1ZS1wcmFjdGljZS9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIi9Vc2Vycy9raW5nc3VuL1x1NjI1M1x1NTRBOS9WdWUvdnVlLXByYWN0aWNlL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7Cgp2YXIgUmVxdWVzdFF1ZXVlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICBmdW5jdGlvbiBSZXF1ZXN0UXVldWUoKSB7CiAgICB2YXIgbWF4TGltaXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDU7CiAgICB2YXIgcmV0cnlMaW1pdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMjsKCiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVxdWVzdFF1ZXVlKTsKCiAgICAvLyDmnIDlpKflkIzml7bor7fmsYLmlbAKICAgIHRoaXMubWF4TGltaXQgPSBtYXhMaW1pdDsgLy8g5bCd6K+V5oC75pWwCgogICAgdGhpcy5yZXRyeUxpbWl0ID0gcmV0cnlMaW1pdDsgLy8g562J5b6F5omn6KGM55qE5Lu75Yqh6Zif5YiXCgogICAgdGhpcy50YXNrUXVldWUgPSBbXTsgLy8g5b2T5YmN6K+35rGC5bm25Y+R5pWwCgogICAgdGhpcy5jdXJyZW50UmVxdWVzdENvdW50ID0gMDsgLy8g5b2T5YmN6K+35rGC5oiQ5Yqf5pWwCgogICAgdGhpcy5kb25lQ291bnQgPSAwOwogIH0KICAvKgogICAqQGZ1bmN0aW9uTmFtZTogIGV4ZWMKICAgKkBwYXJhbXMxOiByZXF1ZXN0KOW8guatpeivt+axgiDosIPnlKjmtYvkvKDlhaUg6ZyA5Li6UHJvbWlzZeWunuS+iykKICAgKkBwYXJhbXMyOiBjYWxsQmFjayDlm57osIPlh73mlbAg5LiA6Iis55So5LqO5YmN56uvcHJvZ3Jlc3Pnu5/orqHlvZPliY3ov5vluqYKICAqLwoKCiAgX2NyZWF0ZUNsYXNzKFJlcXVlc3RRdWV1ZSwgW3sKICAgIGtleTogImV4ZWMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9leGVjID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKHJlcXVlc3QpIHsKICAgICAgICB2YXIgY2FsbEJhY2ssCiAgICAgICAgICAgIHJlc3VsdCwKICAgICAgICAgICAgcmV0cnlDb3VudCwKICAgICAgICAgICAgZG9uZSwKICAgICAgICAgICAgX2FyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY2FsbEJhY2sgPSBfYXJncy5sZW5ndGggPiAxICYmIF9hcmdzWzFdICE9PSB1bmRlZmluZWQgPyBfYXJnc1sxXSA6IGZ1bmN0aW9uICgpIHt9OwogICAgICAgICAgICAgICAgcmVzdWx0ID0gW107IC8vIOW5tuWPkemZkOWItgoKICAgICAgICAgICAgICAgIGlmICghKHRoaXMuY3VycmVudFJlcXVlc3RDb3VudCA+PSB0aGlzLm1heExpbWl0KSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXVzZSgpOwoKICAgICAgICAgICAgICBjYXNlIDU6CiAgICAgICAgICAgICAgICAvLyDmiafooYzpmJ/liJfplb/luqYrMQogICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UmVxdWVzdENvdW50Kys7IC8vIOiuvue9rumYn+WIl+W9k+WJjeS7u+WKoeeahOaJp+ihjOasoeaVsAoKICAgICAgICAgICAgICAgIHJldHJ5Q291bnQgPSB0aGlzLnJldHJ5TGltaXQ7CgogICAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgICAgIGlmICghKHJldHJ5Q291bnQgPiAwKSkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGRvbmUgPSBmYWxzZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA5OwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDEyOwogICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3QoKTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICBkb25lID0gdHJ1ZTsKICAgICAgICAgICAgICAgIHRoaXMuZG9uZUNvdW50Kys7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBQcm9taXNlLnJlc29sdmUocmVzdWx0KSk7CgogICAgICAgICAgICAgIGNhc2UgMTg6CiAgICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTg7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDkpOwoKICAgICAgICAgICAgICAgIGlmICghKHJldHJ5Q291bnQgPT09IDEpKSB7CiAgICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCBQcm9taXNlLnJlamVjdChfY29udGV4dC50MCkpOwoKICAgICAgICAgICAgICBjYXNlIDIzOgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDIzOwoKICAgICAgICAgICAgICAgIGlmIChkb25lKSB7CiAgICAgICAgICAgICAgICAgIGNhbGxCYWNrKHRoaXMuZG9uZUNvdW50KTsKICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UmVxdWVzdENvdW50LS07CiAgICAgICAgICAgICAgICAgIHRoaXMubmV4dCgpOyAvLyDku7vliqHpmJ/liJfpppbpg6jlh7rpmJ8KICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuZmluaXNoKDIzKTsKCiAgICAgICAgICAgICAgY2FzZSAyNjoKICAgICAgICAgICAgICAgIHJldHJ5Q291bnQtLTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgYnJlYWs7CgogICAgICAgICAgICAgIGNhc2UgMjk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzksIDE4LCAyMywgMjZdXSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGV4ZWMoX3gpIHsKICAgICAgICByZXR1cm4gX2V4ZWMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGV4ZWM7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJuZXh0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBuZXh0KCkgewogICAgICBpZiAodGhpcy50YXNrUXVldWUubGVuZ3RoIDw9IDApIHJldHVybjsKICAgICAgdmFyIHJlc29sdmUgPSB0aGlzLnRhc2tRdWV1ZS5zaGlmdCgpOwogICAgICByZXNvbHZlKCk7IC8vIOWPluWHuuS7u+WKoemYn+WIl+mmlumDqOaJp+ihjAogICAgfQogIH0sIHsKICAgIGtleTogInBhdXNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vIOWFpemYnyDlsIZwcm9taXNl5a+56LGh5YWl6ZifIOS4jXJvc29sdmXkuYvliY3ml6Dms5XmiafooYzkuIvkuKrku7vliqEKICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLnRhc2tRdWV1ZS5wdXNoKHJlc29sdmUpOwogICAgICB9KTsKICAgIH0KICB9XSk7CgogIHJldHVybiBSZXF1ZXN0UXVldWU7Cn0oKTsKCmV4cG9ydCB7IFJlcXVlc3RRdWV1ZSBhcyBkZWZhdWx0IH07"},{"version":3,"sources":["/Users/kingsun/打咩/Vue/vue-practice/src/utils/queue.js"],"names":["RequestQueue","maxLimit","retryLimit","taskQueue","currentRequestCount","doneCount","request","callBack","result","pause","retryCount","done","Promise","resolve","reject","next","length","shift","push"],"mappings":";;;;;;IAAqBA,Y;AACnB,0BAA0C;AAAA,QAA9BC,QAA8B,uEAAnB,CAAmB;AAAA,QAAhBC,UAAgB,uEAAH,CAAG;;AAAA;;AACxC;AACA,SAAKD,QAAL,GAAgBA,QAAhB,CAFwC,CAGxC;;AACA,SAAKC,UAAL,GAAkBA,UAAlB,CAJwC,CAMxC;;AACA,SAAKC,SAAL,GAAiB,EAAjB,CAPwC,CAQxC;;AACA,SAAKC,mBAAL,GAA2B,CAA3B,CATwC,CAWxC;;AACA,SAAKC,SAAL,GAAiB,CAAjB;AACD;AAED;AACF;AACA;AACA;AACA;;;;;;0EACE,iBAAWC,OAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAoBC,gBAAAA,QAApB,2DAA+B,YAAM,CAAE,CAAvC;AACMC,gBAAAA,MADN,GACe,EADf,EAGE;;AAHF,sBAIM,KAAKJ,mBAAL,IAA4B,KAAKH,QAJvC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAKU,KAAKQ,KAAL,EALV;;AAAA;AAQE;AACA,qBAAKL,mBAAL,GATF,CAWE;;AACSM,gBAAAA,UAZX,GAYwB,KAAKR,UAZ7B;;AAAA;AAAA,sBAYyCQ,UAAU,GAAG,CAZtD;AAAA;AAAA;AAAA;;AAaQC,gBAAAA,IAbR,GAae,KAbf;AAAA;AAAA;AAAA,uBAgBqBL,OAAO,EAhB5B;;AAAA;AAgBME,gBAAAA,MAhBN;AAiBMG,gBAAAA,IAAI,GAAG,IAAP;AACA,qBAAKN,SAAL;AAlBN,iDAmBaO,OAAO,CAACC,OAAR,CAAgBL,MAAhB,CAnBb;;AAAA;AAAA;AAAA;;AAAA,sBAsBUE,UAAU,KAAK,CAtBzB;AAAA;AAAA;AAAA;;AAuBQC,gBAAAA,IAAI,GAAG,IAAP;AAvBR,iDAwBeC,OAAO,CAACE,MAAR,aAxBf;;AAAA;AAAA;;AA2BM,oBAAIH,IAAJ,EAAU;AACRJ,kBAAAA,QAAQ,CAAC,KAAKF,SAAN,CAAR;AACA,uBAAKD,mBAAL;AACA,uBAAKW,IAAL,GAHQ,CAGI;AACb;;AA/BP;;AAAA;AAYyDL,gBAAAA,UAAU,EAZnE;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;WAoCA,gBAAO;AACL,UAAI,KAAKP,SAAL,CAAea,MAAf,IAAyB,CAA7B,EAAgC;AAChC,UAAMH,OAAO,GAAG,KAAKV,SAAL,CAAec,KAAf,EAAhB;AACAJ,MAAAA,OAAO,GAHF,CAGK;AACX;;;WAED,iBAAQ;AAAA;;AACN;AACA,aAAO,IAAID,OAAJ,CAAY,UAACC,OAAD;AAAA,eAAa,KAAI,CAACV,SAAL,CAAee,IAAf,CAAoBL,OAApB,CAAb;AAAA,OAAZ,CAAP;AACD;;;;;;SAlEkBb,Y","sourcesContent":["export default class RequestQueue {\n  constructor(maxLimit = 5, retryLimit = 2) {\n    // 最大同时请求数\n    this.maxLimit = maxLimit\n    // 尝试总数\n    this.retryLimit = retryLimit\n\n    // 等待执行的任务队列\n    this.taskQueue = []\n    // 当前请求并发数\n    this.currentRequestCount = 0\n\n    // 当前请求成功数\n    this.doneCount = 0\n  }\n\n  /*\n   *@functionName:  exec\n   *@params1: request(异步请求 调用测传入 需为Promise实例)\n   *@params2: callBack 回调函数 一般用于前端progress统计当前进度\n  */\n  async exec(request, callBack = () => {}) {\n    let result = []\n\n    // 并发限制\n    if (this.currentRequestCount >= this.maxLimit) {\n      await this.pause() // 暂停执行 入队\n    }\n\n    // 执行队列长度+1\n    this.currentRequestCount++\n\n    // 设置队列当前任务的执行次数\n    for (let retryCount = this.retryLimit; retryCount > 0; retryCount--) {\n      let done = false\n      try {\n        // request传入的必须是一个promise实例\n        result = await request()\n        done = true\n        this.doneCount++\n        return Promise.resolve(result)\n      } catch (error) {\n        // 最后一次重试失败时停止重试，返回报错\n        if (retryCount === 1) {\n          done = true\n          return Promise.reject(error) // 错误只会抛出一次\n        }\n      } finally {\n        if (done) {\n          callBack(this.doneCount)\n          this.currentRequestCount--\n          this.next() // 任务队列首部出队\n        }\n      }\n    }\n  }\n\n  next() {\n    if (this.taskQueue.length <= 0) return\n    const resolve = this.taskQueue.shift()\n    resolve() // 取出任务队列首部执行\n  }\n\n  pause() {\n    // 入队 将promise对象入队 不rosolve之前无法执行下个任务\n    return new Promise((resolve) => this.taskQueue.push(resolve))\n  }\n}\n"]}]}