{"remainingRequest":"/Users/kingsun/打咩/Vue/vue-practice/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kingsun/打咩/Vue/vue-practice/src/views/test/index.vue?vue&type=style&index=0&id=f3a85fa2&scoped=true&lang=css&","dependencies":[{"path":"/Users/kingsun/打咩/Vue/vue-practice/src/views/test/index.vue","mtime":1652400117112},{"path":"/Users/kingsun/打咩/Vue/vue-practice/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kingsun/打咩/Vue/vue-practice/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/kingsun/打咩/Vue/vue-practice/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/kingsun/打咩/Vue/vue-practice/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kingsun/打咩/Vue/vue-practice/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmRhdGUtcmFuZ2UgewogIGRpc3BsYXk6IGZsZXg7Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8TA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/test","sourcesContent":["<template>\n  <div class=\"date-range\">\n    <!--<year-range-panel />-->\n    <el-select\n      v-if=\"!hideTypeOnlyOne || validTypeList.length > 1\"\n      v-model=\"dateType\"\n      :size=\"size\"\n      style=\"max-width: 100px; min-width: 100px; margin-right: 10px;\"\n    >\n      <el-option v-for=\"type in validTypeList\" :key=\"type.value\" :value=\"type.value\" :label=\"type.label\" />\n    </el-select>\n    <el-date-picker\n      v-model=\"currentDates\"\n      style=\"flex-grow: 1;\"\n      :size=\"size\"\n      :placeholder=\"placeholder\"\n      :type=\"innerDateType\"\n      :disabled=\"disabled\"\n      :format=\"innerDateFormat\"\n      :readonly=\"readonly\"\n      :editable=\"editable\"\n      :clearable=\"clearable\"\n      :start-placeholder=\"startPlaceholder\"\n      :end-placeholder=\"endPlaceholder\"\n      :align=\"align\"\n      :range-separator=\"rangeSeparator\"\n      :value-format=\"valueFormat\"\n      :prefix-icon=\"prefixIcon\"\n      :clear-icon=\"clearIcon\"\n      @change=\"onValueChange\"\n    />\n  </div>\n</template>\n\n<script>\nimport { formatDate, parseDate } from 'element-ui/src/utils/date-util'\n\nconst allTypeList = [{\n  value: 'day',\n  label: '自然日'\n}, {\n  value: 'month',\n  label: '自然月'\n}, {\n  value: 'year',\n  label: '自然年'\n}]\n\nexport default {\n  name: 'DateRange',\n  props: {\n    /**\n     * 绑定的数据\n     */\n    value: {\n      type: [Array],\n      default: () => {\n        return []\n      }\n    },\n    /**\n     * 默认显示的数据选择方式，如果不存在与allowTypes中则显示allowTypes中的第一个\n     */\n    defaultDateType: {\n      type: String,\n      default: 'day'\n    },\n    /**\n     * 组件大小（medium / small / mini）\n     */\n    size: {\n      type: String\n    },\n    /**\n     * 数据选择方式只有一个的时候是否隐藏数据选择方式下拉\n     */\n    hideTypeOnlyOne: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 允许的数据选择方式（day, month, year）\n     * 默认值['day', 'month', 'year']\n     */\n    allowTypes: {\n      type: Array,\n      default: () => {\n        return allTypeList.map((item) => {\n          return item.value\n        })\n      }\n    },\n    /**\n     * 是否范围选择\n     */\n    isRange: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 输出字符串的format\n     */\n    outputFormat: {\n      type: String,\n      default: 'yyyy-MM-dd HH:mm:ss'\n    },\n    /**\n     * 非范围选择时的占位内容\n     */\n    placeholder: String,\n    /**\n     * 范围选择时开始日期的占位内容\n     */\n    startPlaceholder: String,\n    /**\n     * 范围选择时结束日期的占位内容\n     */\n    endPlaceholder: String,\n    /**\n     * 完全只读\n     */\n    readonly: Boolean,\n    /**\n     * 禁用\n     */\n    disabled: Boolean,\n    /**\n     * 文本框可输入\n     */\n    editable: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 是否显示清除按钮\n     */\n    clearable: {\n      type: Boolean,\n      default: true\n    },\n    /**\n     * 对齐方式（left, center, right）\n     */\n    align: {\n      type: String,\n      default: 'left'\n    },\n    /**\n     * 选择范围时的分隔符\n     */\n    rangeSeparator: {\n      type: String,\n      default: '-'\n    },\n    /**\n     * 可选，绑定值的格式。不指定则绑定值为 Date 对象\n     */\n    valueFormat: {\n      type: String,\n      default: 'yyyy-MM-dd'\n    },\n    /**\n     * 自定义头部图标的类名\n     */\n    prefixIcon: {\n      type: String,\n      default: 'el-icon-date'\n    },\n    /**\n     * 自定义清空图标的类名\n     */\n    clearIcon: {\n      type: String,\n      default: 'el-icon-circle-close'\n    }\n  },\n  data() {\n    return {\n      dateType: this.defaultDateType,\n      currentDates: undefined\n    }\n  },\n  computed: {\n    validTypeList() {\n      return allTypeList.filter((item) => {\n        return this.allowTypes.indexOf(item.value) !== -1\n      })\n    },\n    /**\n     * el-date-picker使用的type\n     */\n    innerDateType() {\n      switch (this.dateType) {\n        case 'day': return this.isRange ? 'daterange' : 'date'\n        case 'month': return this.isRange ? 'monthrange' : 'month'\n        case 'year': return this.isRange ? 'monthrange' : 'year'\n        default: return this.isRange ? 'daterange' : 'date'\n      }\n    },\n    /**\n     * el-date-picker使用的format\n     */\n    innerDateFormat() {\n      switch (this.dateType) {\n        case 'day': return 'yyyy-MM-dd'\n        case 'month': return 'yyyy-MM'\n        case 'year': return 'yyyy'\n        default: return 'yyyy-MM-dd'\n      }\n    }\n  },\n  watch: {\n    value: {\n      handler: function(newValue, oldValue) {\n        if (newValue == null || newValue.length < 2) {\n          this.currentDates = this.isRange ? [] : undefined\n        } else {\n          if (this.currentDates == null) this.currentDates = []\n          if (this.isRange) {\n            this.currentDates = [\n              parseDate(newValue[0], this.valueFormat),\n              parseDate(newValue[1], this.valueFormat)\n            ]\n          } else {\n            this.currentDates = parseDate(newValue[0], this.valueFormat)\n          }\n        }\n      },\n      immediate: true,\n      deep: true\n    },\n    dateType: {\n      handler: function(newValue, oldValue) {\n        if (this.allowTypes.indexOf(this.dateType) === -1) {\n          this.dateType = this.allowTypes[0] || 'day'\n        }\n        this.emitChange()\n      },\n      immediate: true\n    },\n    defaultDateType: {\n      handler: function(newValue, oldValue) {\n        if (this.allowTypes.indexOf(newValue) !== -1) {\n          this.dateType = newValue\n        } else {\n          this.dateType = this.allowTypes[0]\n        }\n      }\n    },\n    isRange: {\n      handler: function(newValue, oldValue) {\n        let temp\n        if (newValue) {\n          temp = [this.currentDates, this.currentDates]\n        } else {\n          temp = this.currentDates[0]\n        }\n\n        this.currentDates = temp\n      }\n    }\n  },\n  methods: {\n    onValueChange(values) {\n      this.$nextTick(() => {\n        this.emitChange()\n      })\n    },\n    emitChange() {\n      const outputDate = []\n      if (this.currentDates != null) {\n        if (!this.isRange) {\n          outputDate[0] = new Date(this.currentDates)\n          outputDate[1] = new Date(this.currentDates)\n        } else {\n          if (Array.isArray(this.currentDates) && this.currentDates.length === 2) {\n            outputDate[0] = new Date(this.currentDates[0])\n            outputDate[1] = new Date(this.currentDates[1])\n          }\n        }\n\n        if (outputDate[0] != null && outputDate[1] != null) {\n          outputDate[0].setHours(0, 0, 0, 0)\n          outputDate[1].setHours(0, 0, 0, 0)\n          switch (this.dateType) {\n            case 'day':\n              outputDate[1].setDate(outputDate[1].getDate() + 1)\n              break\n            case 'month':\n              outputDate[1].setDate(1)\n              outputDate[0].setDate(1)\n              outputDate[1].setMonth(outputDate[1].getMonth() + 1)\n              break\n            case 'year':\n              outputDate[1].setMonth(0)\n              outputDate[1].setDate(1)\n              outputDate[0].setMonth(0)\n              outputDate[0].setDate(1)\n              outputDate[1].setFullYear(outputDate[1].getFullYear() + 1)\n              break\n          }\n          outputDate[1] = new Date(outputDate[1].getTime() - 1)\n\n          outputDate[0] = formatDate(outputDate[0], this.outputFormat)\n          outputDate[1] = formatDate(outputDate[1], this.outputFormat)\n        }\n      }\n      this.$emit('input', outputDate)\n      this.$emit('change', outputDate)\n    },\n    getCurrentStatsDateType() {\n      return this.dateType\n    }\n  }\n}\n</script>\n\n<style scoped>\n  .date-range {\n    display: flex;\n  }\n</style>\n"]}]}